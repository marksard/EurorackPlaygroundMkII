/*!
 * Oscillator class
 * Copyright 2024 marksard
 * This software is released under the MIT license.
 * see https://opensource.org/licenses/MIT
 */

#pragma once
#include <Arduino.h>

// pwm reso 2048, bias 1023
const uint16_t decayCurveSize = 1024; 
const uint16_t decayCurve[1024] = {
1024,1021,1019,1017,1014,1012,1010,1007,1005,1003,1001,998,996,994,992,989,
987,985,983,980,978,976,974,971,969,967,965,963,960,958,956,954,
952,950,947,945,943,941,939,937,935,932,930,928,926,924,922,920,
918,915,913,911,909,907,905,903,901,899,897,895,893,891,888,886,
884,882,880,878,876,874,872,870,868,866,864,862,860,858,856,854,
852,850,848,846,844,842,840,838,837,835,833,831,829,827,825,823,
821,819,817,815,813,812,810,808,806,804,802,800,798,796,795,793,
791,789,787,785,783,782,780,778,776,774,772,771,769,767,765,763,
762,760,758,756,754,753,751,749,747,746,744,742,740,738,737,735,
733,731,730,728,726,725,723,721,719,718,716,714,713,711,709,707,
706,704,702,701,699,697,696,694,692,691,689,687,686,684,682,681,
679,677,676,674,673,671,669,668,666,664,663,661,660,658,656,655,
653,652,650,648,647,645,644,642,641,639,638,636,634,633,631,630,
628,627,625,624,622,621,619,618,616,614,613,611,610,608,607,605,
604,602,601,599,598,597,595,594,592,591,589,588,586,585,583,582,
580,579,578,576,575,573,572,570,569,568,566,565,563,562,560,559,
558,556,555,553,552,551,549,548,546,545,544,542,541,540,538,537,
536,534,533,531,530,529,527,526,525,523,522,521,519,518,517,515,
514,513,511,510,509,508,506,505,504,502,501,500,498,497,496,495,
493,492,491,490,488,487,486,484,483,482,481,479,478,477,476,474,
473,472,471,470,468,467,466,465,463,462,461,460,459,457,456,455,
454,453,451,450,449,448,447,445,444,443,442,441,440,438,437,436,
435,434,433,431,430,429,428,427,426,424,423,422,421,420,419,418,
417,415,414,413,412,411,410,409,408,406,405,404,403,402,401,400,
399,398,397,396,394,393,392,391,390,389,388,387,386,385,384,383,
382,381,379,378,377,376,375,374,373,372,371,370,369,368,367,366,
365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,
349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,
333,332,331,330,329,328,327,326,325,324,324,323,322,321,320,319,
318,317,316,315,314,313,312,311,310,310,309,308,307,306,305,304,
303,302,301,300,300,299,298,297,296,295,294,293,292,292,291,290,
289,288,287,286,285,285,284,283,282,281,280,279,278,278,277,276,
275,274,273,273,272,271,270,269,268,267,267,266,265,264,263,262,
262,261,260,259,258,258,257,256,255,254,254,253,252,251,250,249,
249,248,247,246,245,245,244,243,242,242,241,240,239,238,238,237,
236,235,235,234,233,232,231,231,230,229,228,228,227,226,225,225,
224,223,222,222,221,220,219,219,218,217,216,216,215,214,214,213,
212,211,211,210,209,208,208,207,206,206,205,204,203,203,202,201,
201,200,199,198,198,197,196,196,195,194,194,193,192,192,191,190,
189,189,188,187,187,186,185,185,184,183,183,182,181,181,180,179,
179,178,177,177,176,175,175,174,173,173,172,172,171,170,170,169,
168,168,167,166,166,165,164,164,163,163,162,161,161,160,159,159,
158,158,157,156,156,155,154,154,153,153,152,151,151,150,150,149,
148,148,147,147,146,145,145,144,144,143,142,142,141,141,140,139,
139,138,138,137,137,136,135,135,134,134,133,132,132,131,131,130,
130,129,129,128,127,127,126,126,125,125,124,123,123,122,122,121,
121,120,120,119,119,118,117,117,116,116,115,115,114,114,113,113,
112,112,111,110,110,109,109,108,108,107,107,106,106,105,105,104,
104,103,103,102,102,101,101,100,100,99,99,98,98,97,97,96,
96,95,95,94,94,93,93,92,92,91,91,90,90,89,89,88,
88,87,87,86,86,85,85,84,84,83,83,82,82,81,81,81,
80,80,79,79,78,78,77,77,76,76,75,75,74,74,74,73,
73,72,72,71,71,70,70,69,69,69,68,68,67,67,66,66,
65,65,65,64,64,63,63,62,62,62,61,61,60,60,59,59,
59,58,58,57,57,56,56,56,55,55,54,54,53,53,53,52,
52,51,51,51,50,50,49,49,48,48,48,47,47,46,46,46,
45,45,44,44,44,43,43,42,42,42,41,41,40,40,40,39,
39,39,38,38,37,37,37,36,36,35,35,35,34,34,34,33,
33,32,32,32,31,31,31,30,30,29,29,29,28,28,28,27,
27,26,26,26,25,25,25,24,24,24,23,23,22,22,22,21,
21,21,20,20,20,19,19,19,18,18,18,17,17,17,16,16,
15,15,15,14,14,14,13,13,13,12,12,12,11,11,11,10,
10,10,9,9,9,8,8,8,7,7,7,6,6,6,5,5,
5,5,4,4,4,3,3,3,2,2,2,1,1,1,0,0};

template <typename vs = int16_t>
class SingleShotWave
{
public:
    SingleShotWave(const vs wave[], uint32_t waveLength)
    {
        init(wave, waveLength);
    }

    void init(const vs wave[], uint32_t waveLength)
    {
        _pWave = wave;
        _waveLength = waveLength;
        _start = false;
        _waveIndex = 0.0;
        _pitch = 1.0;
        _volume = 1.0;
        _bias = 1023;
        _decayIndex = 0.0;
        _decayValue = 0;
        _lastEdge = 0;
        // _lastValue = _bias;
        _mute = false;
    }

    uint16_t updateWave()
    {
        if (!_start)
            return _bias;

        int16_t value = _pWave[(int)_waveIndex];
        _waveIndex += _pitch;
        if (_waveIndex >= _waveLength)
        {
            _start = false;
            _waveIndex = 0.0;
            _decayIndex = 0.0;
            // _lastValue = _bias;
            return _bias;
        }

        if (_mute)
            return _bias;

        value = (uint16_t)((((int32_t)value * _decayValue) >> 10) + _bias);
        // simplest linear interpolation
        // value = (_lastValue + value) >> 1;
        // _lastValue = value;
        return value;
    }

    void play(int8_t edge)
    {
        if (_lastEdge == 0 && edge != 0)
        {
            _start = true;
            _waveIndex = 0.0;
            _decayIndex = 0.0;
        }
        _lastEdge = edge;
    }

    void updateDecay(float value)
    {
        float decay = (1.0 - value);
        _decayValue = decayCurve[(int)_decayIndex] * _volume;
        _decayIndex += decay;
        if (_decayIndex >= decayCurveSize)
        {
            _start = false;
        }
    }

    void setSpeed(float value) { _pitch = value; }

    void setBias(vs value) { _bias = value; }
    void setMute(bool value) { _mute = value; }
    void setVolume(float value) { _volume = value; }

private:
    const vs *_pWave;
    uint32_t _waveLength;
    bool _start;
    bool _mute;
    float _waveIndex;
    float _pitch;
    float _volume;
    vs _bias;
    // vs _lastValue;
    float _decayIndex;
    int16_t _decayValue;
    int8_t _lastEdge;
};
